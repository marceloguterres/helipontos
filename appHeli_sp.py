import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
import re
import matplotlib.pyplot as plt

st.set_page_config(page_title="Helipontos SP", layout="wide")
st.title("Helipontos na cidade S√£o Paulo")

# --- Convers√£o de coordenadas DMS para decimal ---
def dms_para_decimal(coord):
    try:
        coord = coord.replace("‚Äô", "'").replace("‚Äò", "'").replace("‚Äù", '"').replace("‚Äú", '"').replace("''", '"')
        match = re.match(r"(\d+)¬∞(\d+)'{1,2}(\d+)", coord.strip())
        if not match:
            return None
        graus, minutos, segundos = map(int, match.groups())
        decimal = graus + minutos / 60 + segundos / 3600
        if "S" in coord or "O" in coord or "W" in coord:
            decimal = -decimal
        return decimal
    except:
        return None

# --- C√°lculo da √°rea ---
def calcular_area(dimensao):
    try:
        partes = dimensao.lower().replace("m", "").split("x")
        largura = float(partes[0].strip())
        comprimento = float(partes[1].strip())
        return largura * comprimento
    except:
        return None

# --- Cores fixas por tipo de superf√≠cie ---
CORES_SUPERFICIE = {
    "Aguardando dados": "#FF6B6B",
    "Grama": "#43AA8B",
    "Concreto": "#4D6CFA",
    "Met√°lico": "#FFA500",
    "Asfalto": "#5C33F6",
}

# --- Carregar dados dos helipontos ---
@st.cache_data
def carregar_helipontos():
    df = pd.read_csv("helipontos_sp.csv")
    df["√Årea (m¬≤)"] = df["Dimens√µes"].apply(calcular_area)
    df["lat"] = df["Latitude"].apply(dms_para_decimal)
    df["lon"] = df["Longitude"].apply(dms_para_decimal)
    df["Superf√≠cie"] = df["Superf√≠cie"].fillna("Aguardando dados").astype(str)

    categorias_fixas = list(CORES_SUPERFICIE.keys())
    for cat in categorias_fixas:
        if cat not in df["Superf√≠cie"].unique():
            df = pd.concat([df, pd.DataFrame([{"Superf√≠cie": cat, "lat": None, "lon": None}])], ignore_index=True)
    return df

# --- Carregar dados das rotas REH ---
@st.cache_data
def carregar_rotas():
    df_rotas = pd.read_csv("REHs_SP.csv", encoding="utf-8")
    latitudes, longitudes = [], []
    for coord in df_rotas["Coordenadas"]:
        partes = coord.split("/")
        latitudes.append(dms_para_decimal(partes[0].strip()))
        longitudes.append(dms_para_decimal(partes[1].strip()))
    df_rotas["lat"] = latitudes
    df_rotas["lon"] = longitudes
    return df_rotas

# --- Carregamento
df = carregar_helipontos()
df_rotas = carregar_rotas()

# --- Filtros
st.sidebar.header("Filtros")
superficies_disponiveis = sorted(df["Superf√≠cie"].dropna().unique())
opcoes_superficie = ["Todas"] + list(superficies_disponiveis)
superficie_selecionada = st.sidebar.selectbox("Tipo de superf√≠cie:", opcoes_superficie, index=0)

operacoes_disponiveis = sorted(df["Opera√ß√£o"].dropna().unique())
opcoes_operacao = ["Todas"] + operacoes_disponiveis
operacao_selecionada = st.sidebar.selectbox("Tipo de opera√ß√£o:", opcoes_operacao, index=0)

area_min = st.sidebar.number_input("√Årea m√≠nima (m¬≤)", min_value=0, value=0, step=10)
fundo_mapa = st.sidebar.selectbox("Estilo do mapa base:", ["OpenStreetMap", "CartoDB Positron", "Stamen Terrain", "Stamen Toner"])
tamanho_circulo = st.sidebar.slider("Tamanho dos c√≠rculos (helipontos)", 2, 20, value=6)

# --- Aplicar filtros
df_filtrado = df.copy()
if superficie_selecionada != "Todas":
    df_filtrado = df_filtrado[df_filtrado["Superf√≠cie"] == superficie_selecionada]
if operacao_selecionada != "Todas":
    df_filtrado = df_filtrado[df_filtrado["Opera√ß√£o"] == operacao_selecionada]
df_filtrado = df_filtrado[df_filtrado["√Årea (m¬≤)"].fillna(0) > area_min]
df_mapa = df_filtrado.dropna(subset=["lat", "lon"])

# --- Abas
aba_mapa, aba_tabela, aba_estat, aba_criterios = st.tabs([
    "üó∫Ô∏è Mapa", "üìã Tabela", "üìä Estat√≠sticas", "üìå Crit√©rios e Contexto"
])

# --- Aba 1: Mapa
with aba_mapa:
    st.subheader("Mapa de Helipontos + Rotas REH")
    m = folium.Map(location=[-23.55, -46.63], zoom_start=11, tiles=fundo_mapa)

    for _, row in df_mapa.iterrows():
        cor = CORES_SUPERFICIE.get(row["Superf√≠cie"], "#999999")
        popup = f"<b>{row['Nome']}</b><br>Superf√≠cie: {row['Superf√≠cie']}<br>√Årea: {row['√Årea (m¬≤)']} m¬≤"
        folium.CircleMarker(
            location=[row["lat"], row["lon"]],
            radius=tamanho_circulo,
            color=cor,
            fill=True,
            fill_color=cor,
            fill_opacity=0.85,
            popup=popup
        ).add_to(m)

    for nome_reh, grupo in df_rotas.groupby("REH"):
        grupo = grupo.sort_values("√çndice")
        caminho = grupo[["lat", "lon"]].dropna().values.tolist()
        if len(caminho) >= 2:
            folium.PolyLine(
                locations=caminho,
                color="#006400",  # verde escuro
                weight=5,
                tooltip=nome_reh
            ).add_to(m)

    st_data = st_folium(m, width=1100, height=600)

    st.markdown("### Legenda de Superf√≠cies")
    for nome, cor in CORES_SUPERFICIE.items():
        st.markdown(f'''
            <div style="display:flex; align-items:center; margin-bottom:5px;">
                <div style="width:20px; height:20px; background-color: {cor}; margin-right:10px; border-radius: 3px;"></div>
                {nome}
            </div>
        ''', unsafe_allow_html=True)

# --- Aba 2: Tabela
with aba_tabela:
    st.subheader("Tabela de Helipontos")
    st.dataframe(df_filtrado)

# --- Aba 3: Estat√≠sticas
with aba_estat:
    st.subheader("Distribui√ß√£o das √Åreas dos Helipontos")

    df_areas = df_filtrado[df_filtrado["√Årea (m¬≤)"].notnull()]
    if df_areas.empty:
        st.warning("Nenhum dado de √°rea dispon√≠vel para gerar o histograma.")
    else:
        fig, ax = plt.subplots(figsize=(5, 2.5))
        ax.hist(df_areas["√Årea (m¬≤)"], bins=20, color="#D3D3D3", edgecolor="black")
        ax.set_title("√Åreas dos Helipontos", fontsize=10)
        ax.set_xlabel("√Årea (m¬≤)", fontsize=9)
        ax.set_ylabel("Frequ√™ncia", fontsize=9)
        ax.tick_params(axis='both', labelsize=8)
        st.pyplot(fig)



# --- Aba 4: Crit√©rios e Contexto
with aba_criterios:
    st.subheader("Crit√©rios de Avalia√ß√£o para Helipontos")
    st.markdown("""
    - **√Årea (m¬≤):** Tamanho f√≠sico da superf√≠cie do heliponto.  
    - **Altitude do heliponto:** Altura em rela√ß√£o ao n√≠vel do mar (impacta navega√ß√£o).  
    - **Proximidade da REH:** Dist√¢ncia em rela√ß√£o a rotas a√©reas principais.  
    - **Grau de import√¢ncia do pr√©dio:** Fun√ß√£o estrat√©gica (hospitais, governo, m√≠dia, etc).  
    - **Grau de interfer√™ncia no espa√ßo a√©reo comercial:** Avalia√ß√£o de conflitos com rotas regulares.  
    - **Uso do pr√©dio (comercial ou institucional):** Edifica√ß√µes comerciais costumam demandar mais movimenta√ß√£o a√©rea.  
    - **Proximidade de shoppings ou grandes estacionamentos:** Facilita o acesso terrestre e integra√ß√£o modal.  
    - **Tipo de opera√ß√£o (IFR ou VFR):** Define o n√≠vel de infraestrutura e restri√ß√µes de opera√ß√£o conforme visibilidade e instrumentos.  
    """)

    st.divider()

    st.subheader("Contexto da Opera√ß√£o A√©rea em S√£o Paulo")
    st.markdown("""
    > üöÅ **400 helic√≥pteros** registrados na cidade e **700 no estado**, realizando mais de  
    > **1.300 viagens di√°rias** ‚Äî superando **Nova York** e **T√≥quio**.  
    >
    > üìö *Fonte: Salim e Bosco (2020)*
    """)
    
    st.divider()
    st.subheader("‚úàÔ∏è eVTOLs e o Uso das REHs")

    st.markdown("""
    **‚úÖ 1.O eVTOL poder√° cruzar uma REH?**  
    Sim. As REHs s√£o espa√ßos VFR e n√£o exclusivos para helic√≥pteros.  
    O importante √© manter a separa√ß√£o adequada, cumprir os procedimentos locais e estar em coordena√ß√£o com o controle (ou auto-coordena√ß√£o em FCA, se for o caso).  
    O que importa n√£o √© o tipo de aeronave (helic√≥ptero ou eVTOL), mas se ela pode operar VFR, com comunica√ß√£o ativa, equipamentos obrigat√≥rios (como transponder) e velocidade/altitude compat√≠veis.

    **‚úàÔ∏è 2. Ser√° comum um eVTOL usar uma REH?**  
    Provavelmente sim, mas com ressalvas. Como disse M√°rcio Andr√©, "na pr√°tica, provavelmente acompanhar√° o desenho das REH".  
    Isso porque:
    - As REH seguem eixos urbanos com √°reas livres para pouso de emerg√™ncia (vias, rios, parques);  
    - Evitam rotas IFR de avi√µes, reduzindo conflito com tr√°fego comercial;  
    - Facilitam a gest√£o de tr√°fego misto com regras unificadas e previsibilidade.

    Entretanto, eVTOLs tamb√©m poder√£o seguir novas rotas, como:
    - Corredores espec√≠ficos para eVTOLs (otimizados para baixa velocidade e ru√≠do);  
    - Faixas de altitude diferentes, com separa√ß√£o vertical das REHs.

    **üß≠ 3. E se o eVTOL precisar cruzar uma REH?**  
    Pode, desde que:
    - Haja separa√ß√£o vertical adequada (ex: cruzar 500 p√©s acima);  
    - Seja coordenado com controle (Torre, APP);  
    - Ou em ponto autorizado conforme carta REH ou UTM.
    """)
